#Challenges of Good API Design
clear naming
clear directions
knowledge of use case
versioning
backwad compatibility
adaptability

#you must understand your busineess process
install live headers extension

#API Design is complex and must be deliberate
Funictionalityto expose
best way to expose it
test assumptions + user testing
and repeat

#Affordance : something that allows you to perform an action
Three most important questions:
what the API makes easy, What the API does, what the user wants to do(need)?
Example Coffee cup 

#Approaches to adding an API
Bolt-on: brute force approach, fastest way to build, existing code
Greenfield: for new systems, take new advantage of technology and architectures
Facade : recommanded approache, change piece by piece 

#modeling API
Support the Bussiness
Process, Goals, Requirements
	API needs to work with Process,goals. requirements
API Process modeling has 5 steps:
1-identify participants
2-indentify activities
3-Break into steps
4-create API Definitions
5-Validate API
######################### step 1 ########################
-Participants: entities who will use the API, who the are?Name and role, internal or external, Active or passive
Model exercise : Coffee

-Activities: version 1: order, wait, enjoy, 
######################### step 2 ########################
Version 2:the patron places an order with the cashier,
the cashier passes the order to the barista
the barista acknowledge the order and adds it to the queue.
the cashier tells the patron their total bill.
the patron provides payment, which is accepted or rejected
the barista makes order and delivers it tot the patron
##Online book order model
-Participants : Customer, system admin, developer, stock cleark, cutomer support.
######################### 2 step and 3 step ########################
ordering a online  book
Process steps:
the customer searches for the book
the customer adds the book to their cart
the customer adds or removes more things
the customer checks out
the stock clerk retreives and ships the book
customer support contacts the customer about the book
######################### 4 step ########################
#Creating and grouping API method
Process Steps:
view items
add items to cart
add or remove more items
place order
ship order
cancel order

#resources for tze bookstore API
list item       -> check out
view items      -> list orders
add item to cart-> view orders
view cart       -> cancel orders

#Mapping activities to verbs and actions.
CRUD    -> HTTP
Create  -> Post
Retrieve->Get
Update  -> Put
Delete  -> Delete

Put: update an existing resources
Post : used to cerate a new respirce, used to change the status or state pf a respirce, used for anything else that doesn't cleanly fit the first three verbs

list items : get request
view items :  get request
create cart : post request
add items to cart : put request
checkout : post request
Create order : complete before checkout
view order: get request
cancel order: post request
Customer registration : 
view customer : Get 
Unknown is OKAY

API relationship 
independent:can exist on its own wihtout any other resources. Example Movies and actors
dependent: can only exist if another resource already exists. charachters in movies
associative:  can be dependent or independent but needs additional information to describe it. 

items are independent
carts must have items (deoendent)
orders come from carts(deoendent)
orders must have customer(dependent)
API must not follow the same database schema

#Validating an API
step through API calls -> write vode ass if an API exists -> look for gaps and potential issues.

##Use a microframework
Use hapi.js for node, slim in oho
Accept incoming requests
Validate verbs and URL patterns
Return statuc HTTP reponse codes and payloads

##Write the Documentation (can be use google document)
List the end points - descrone what they do
list the parameters - describe what they mean
list the response codes - describe when you get each
show the response payloads - define the fields

##Risks: Documentation Approaches
Team may try to perfect the documentation. it should be quick, not perfect.
Documentation may lead some to false assumptions. Be vlear with stakeholders that this documentation is for evaluation and validation purposes

#REST and HTML
HTTP: Protocol, XML: Markup language, JSON: Notation
REST: is a set of principles and constraints.
SOAP:                           REST:
A fix process                   Few requirements
lots of documents up front      Docs discovered as you goals
Detailed scenarios              Flexible, based on needs
Complex error handling          Flexible, based on patterns

HTTP has request with header and get response as a payloads
200 OK          : request was successful
201 Created     : Resource was created
202 Accepted    : Accepted Action has started
204 No content  : Delete a resource 
HTTP Response code : 3xx
301 Moved permanently 
302 Moved Temporarily
HTTP Response code : 4 (authentication is required)
401 authenticated required, 404,400
100-199 informational
200-299 success
300-399 Redirect
400-499 Client Error
500-599 Server Error

#REST API COnstraints
1- Client server architectures
2- Stateless architectures3
3- Cacheable 
    GET,PUT,Delete (idempotent or safe commands are the state of resources on the server is exactly the same after repeated commands)"Cached") 
    POST ( the state of resource on the server may change after repeated commands) "often not chached")
4- Layered systems : authenticate, load balancing, authorization
5- Code on demand : when a client requests a resource it also receives the code to act upon it. allows for flexonilolity, upgradability and extensibility.
6- Uniform interfaces : identification of resources, manioulation of resources through these representations, self descriptive messages,  
    it has four principles:
        Identification of resources
        Manipulation of resources through these representations
        self descriptive messages
        Hyperedia as the engine of application state.(Hateoas)

#API Design Patterns
Authentication: establish who you are, login with credentials 
Autorization :      Establish your permission, restricted access

Autorization factors, who you are: customer, employee, your group: admin or VIP, subscribtion level: fees or paid, context:time or location or device, actions attempted: bulk or regular or unusual
##API Key
easy to add to header or URL, Framework and programming languae agnostic
Dont write your own protocol
Authorization protocol: OAuth, OAuth2.0

API Versioning:
Header or url
Content negotiation in accept header:
   Establish the markup or notation
   Establish the media type(structure of the markup)
   Establish the version of the media type and resources
  
##Large scale APIs

##using the URL in Practice
ALL APIs in an organization should take the same versioning approach. 1- Simplify training, 2- increase predoctability for users. 3- Maintain clarity

#Choosing media types and processing content:
media type : shared data structures for JSON. Growing ecosystem. supported by libraries.
1.Collection JSON
2. Hypertext application language (HAL): data and link seperate
3- hypermedia: video, audio, text

#Advance http header: content negotiation and chaching
ETags: the client makes a request
the server response and create an Etag nased on the resoure state.
The client makes a HEAD request.(same reqzest as before)
if the data is unchangesd the server returns the same ETag-complete
if the data has changed the server returns a new ETag-complete.
If the ETag is changed the client makes the full request.

#Documentation
Dont distribute a PDF
##Tool: wiki docmentaion
##Documentation via Static site :
Leverages generators : for example Jekyll
Easy to configure
No version control built in 
easy to maintain
##Favorite: Slate

#Build a Great SDK Experience
S succinct: concise but precise
P purposeful: apply the same care as you would to the API
O open source: encourage wrappers, extensions, user contributions
I idiomatic: user the oatterns and concentions of the language
L logical: be consistent and repeat common patterns






